import random

def print_board(board):
    for row in board:
        print(" ".join(row))
    print()

def check_winner(board):
    # Check rows, columns, and diagonals
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != ' ' or \
           board[0][i] == board[1][i] == board[2][i] != ' ':
            return board[i][0]
    
    if board[0][0] == board[1][1] == board[2][2] != ' ' or \
       board[0][2] == board[1][1] == board[2][0] != ' ':
        return board[1][1]

    return None

def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

def get_empty_cells(board):
    return [(row, col) for row in range(3) for col in range(3) if board[row][col] == ' ']

def minimax(board, depth, maximizing_player):
    winner = check_winner(board)
    if winner is not None:
        return 1 if winner == 'X' else -1

    if is_board_full(board):
        return 0

    if maximizing_player:
        max_eval = float('-inf')
        for row, col in get_empty_cells(board):
            board[row][col] = 'X'
            eval = minimax(board, depth + 1, False)
            board[row][col] = ' '
            max_eval = max(max_eval, eval)
        return max_eval

    else:
        min_eval = float('inf')
        for row, col in get_empty_cells(board):
            board[row][col] = 'O'
            eval = minimax(board, depth + 1, True)
            board[row][col] = ' '
            min_eval = min(min_eval, eval)
        return min_eval

def get_best_move(board):
    best_val = float('-inf')
    best_move = None
    for row, col in get_empty_cells(board):
        board[row][col] = 'X'
        move_val = minimax(board, 0, False)
        board[row][col] = ' '
        if move_val > best_val:
            best_move = (row, col)
            best_val = move_val
    return best_move

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]

    while True:
        print_board(board)

        # Player's move
        while True:
            player_row = int(input("Enter row (0, 1, or 2): "))
            player_col = int(input("Enter column (0, 1, or 2): "))
            
            if 0 <= player_row < 3 and 0 <= player_col < 3 and board[player_row][player_col] == ' ':
                board[player_row][player_col] = 'O'
                break
            else:
                print("Invalid move. Try again.")

        # Check if player wins
        if check_winner(board) == 'O':
            print_board(board)
            print("You win!")
            break

        # Check for a tie
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        # AI's move
        ai_row, ai_col = get_best_move(board)
        board[ai_row][ai_col] = 'X'

        # Check if AI wins
        if check_winner(board) == 'X':
            print_board(board)
            print("AI wins!")
            break

        # Check for a tie
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

if _name_ == "_main_":
    main()
